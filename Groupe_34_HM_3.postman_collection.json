{
	"info": {
		"_postman_id": "241c839f-5ab2-4b95-9c3d-397b0e16b899",
		"name": "Groupe_34_HM_3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24736720",
		"_collection_link": "https://universal-trinity-512155.postman.co/workspace/Team-Workspace~af30c816-73c8-43e1-8e42-fccd61abed6e/collection/24736720-241c839f-5ab2-4b95-9c3d-397b0e16b899?action=share&creator=24736720&source=collection_link"
	},
	"item": [
		{
			"name": "1 HM_3 login ++++",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"    // ДЗ_3 Postman\r",
							"    // =====\r",
							"\r",
							"    // 1) необходимо залогиниться\r",
							"    // POST\r",
							"    // http://162.55.220.72:5005/login\r",
							"    // login : str (кроме /)\r",
							"    // password : str\r",
							"\r",
							"// Приходящий токен необходимо передать во все остальные запросы.\r",
							"\r",
							"var respData = pm.response.json();\r",
							"var auth_token = respData.token;\r",
							"console.log(auth_token)\r",
							"\r",
							"pm.environment.set(\"auth_token\", auth_token);\r",
							"\r",
							"\r",
							"// дальше все запросы требуют наличие токена.\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Tihiy",
							"type": "text"
						},
						{
							"key": "password",
							"value": "123",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/login",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "2 HM3 /user_info проверка структуры + 4проверить переделать",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2) http://162.55.220.72:5005/user_info\r",
							"// req. (RAW JSON)\r",
							"// POST\r",
							"// age: int\r",
							"// salary: int\r",
							"// name: str\r",
							"// auth_token\r",
							"\r",
							"\r",
							"// resp.\r",
							"// {'start_qa_salary':salary,\r",
							"//  'qa_salary_after_6_months': salary * 2,\r",
							"//  'qa_salary_after_12_months': salary * 2.9,\r",
							"//  'person': {'u_name':[user_name, salary, age],\r",
							"//                                 'u_age':age,\r",
							"//                                 'u_salary_1.5_year': salary * 4}\r",
							"//                                 }\r",
							"\r",
							"// Тесты:\r",
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"var respData = pm.response.json()\r",
							"console.log(typeof respdata)\r",
							"\r",
							"var schema = {\r",
							"    \r",
							"        // \"type\": \"boolean\",\r",
							"        \"type\":\"object\",\r",
							"              \"properties\":{\r",
							"                       \"person\":{\r",
							"                           \"u_age\":{\"type\":\"number\"},\r",
							"                           \"u_name\":{\"type\":\"array\" },\r",
							"                                \"items\": {\r",
							"                                    \"items\":[{\"type\":\"string\"},{\"type\":\"number\"},{\" type\":\"number\"}]\r",
							"                                         },\r",
							"                           \"u_salary_1_5_year\":{\"type\":\"number\"}\r",
							"                                },\r",
							"// \"requred\":[\"items\"],\r",
							"\r",
							"                         \"qa_salary_after_12_months\":{\"type\":\"number\"},\r",
							"                         \"qa_salary_afer_6_months\":{\"type\":\"number\"},\r",
							"                         \"start_qa_salary\":{\"type\":\"number\"}\r",
							"                           },\r",
							"\"requred\":[\"person\", \"qa_salary_after_12_months\", \"qa_salary_after_6_months\",  \"start_qa_salary\"],\r",
							"            \r",
							"};\r",
							"pm.test('Schema is valid', +function () {\r",
							"    pm.expect(tv4.validate(respData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Schema is valid_1\", function(){\r",
							"\tpm.response.to.have.jsonSchema(schema);\r",
							"  });\r",
							"\r",
							"pm.test(\"Resp is JSON\", function () {\r",
							" pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"var respData = pm.response.json();\r",
							"var reqJsonData = JSON.parse(request.data)\r",
							"// 1.\r",
							"pm.test(\"start_qa_salary':salary * 2\", function () {\r",
							"    pm.expect(respData.qa_salary_after_6_months).to.eql(reqJsonData.salary*2);\r",
							"});\r",
							"\r",
							"console.log(respData.qa_salary_after_6_months)\r",
							"console.log(reqJsonData.salary*2)\r",
							"// 2.\r",
							"pm.test(\"qa_salary_after_12_months = salary * 2.9\", function () {\r",
							"    pm.expect(respData.qa_salary_after_12_months).to.eql(reqJsonData.salary*2.9);\r",
							"});\r",
							"\r",
							"console.log(respData.qa_salary_after_12_months)\r",
							"console.log(reqJsonData.salary*2.9)\r",
							"\r",
							"// 3.\r",
							"pm.test(\"u_salary_1.5_year = salary * 4\", function () {\r",
							"    pm.expect(respData.person.u_salary_1_5_year).to.eql(reqJsonData.salary*4);\r",
							"});\r",
							"\r",
							"console.log(respData.person.u_salary_1_5_year)\r",
							"console.log(reqJsonData.salary*4)\r",
							"\r",
							"\r",
							"// 4) Достать значение из поля 'u_salary_1_5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"\r",
							"var respSal_1_5 = respData.person.u_salary_1_5_year\r",
							"console.log(respSal_1_5)\r",
							"\r",
							"pm.environment.set(\"salary1\", respSal_1_5);\r",
							"\r",
							"\r",
							"// ===================\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"age\": 43,\r\n\"salary\": 1000,\r\n\"name\": \"vikor\",\r\n\"auth_token\":\"{{auth_token}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "3 /new_data  +++",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 3) http://162.55.220.72:5005/new_data\r",
							"// req.\r",
							"// POST\r",
							"// age: int\r",
							"// salary: int\r",
							"// name: str\r",
							"// auth_token\r",
							"\r",
							"// Resp.\r",
							"// {'name':name,\r",
							"//   'age': int(age),\r",
							"//   'salary': [salary, str(salary*2), str(salary*3)]}\r",
							"\r",
							"// Тесты:\r",
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 2) Проверка структуры json в ответе.\r",
							"var respData = pm.response.json()\r",
							"console.log(typeof respData)\r",
							"var schema = {\r",
							" \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"           \"age\": {\"type\": \"integer\"},\r",
							"           \"name\": {\"type\": \"string\"},\r",
							"           \"salary\":{\r",
							"                 \"type\":\"array\",\r",
							"                 \"items\":[{\"type\":\"integer\"},{\"type\":\"string\"},{\" type\":\"string\"}]\r",
							"                    },\r",
							"               \"required\":[\"items\"]\r",
							"                   },\r",
							"            \"required\":[\"age\", \"name\", \"salary\"] \r",
							"};\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(respData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"var respData = pm.response.json();\r",
							" console.log(respData)\r",
							"\r",
							"var respsal = respData.salary[0];\r",
							"var respsal1 = respData.salary[1];\r",
							"var respsal2 = respData.salary[2];\r",
							"pm.test(\"resp salary = resp salary[0]\", function () {\r",
							"    pm.expect(respsal).to.eql(respsal);\r",
							"});\r",
							" console.log(respsal)\r",
							"console.log(respsal)\r",
							"\r",
							"pm.test(\"resp salary *2 = resp salary[2]\", function () {\r",
							"    pm.expect(+respsal1).to.eql(+respsal*2);\r",
							"});\r",
							" console.log(respsal1)\r",
							"console.log(+respsal*2)\r",
							"\r",
							"pm.test(\"resp salary *3 = resp salary[3]\", function () {\r",
							"    pm.expect(+respsal2).to.eql(respsal*3);\r",
							"});\r",
							" console.log(respsal2)\r",
							"console.log(respsal*3)\r",
							"\r",
							"// 4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"pm.test(\"Check resp.salary[2] > resp.salary[0] \", function () {\r",
							"    pm.expect(+respData.salary[2]).to.be.above(respData.salary[0]);\r",
							"});\r",
							"pm.test(\"Check resp.salary[2] > resp.salary[1] \", function () {\r",
							"    pm.expect(+respData.salary[2]).to.be.above(+respData.salary[1]);\r",
							"});\r",
							"\r",
							"pm.test(\"Check resp.salary[0] < resp.salary[2] \", function () {\r",
							"    pm.expect(respData.salary[0]).to.be.below(+respData.salary[2]);\r",
							"});\r",
							"pm.test(\"Check resp.salary[1] < resp.salary[2] \", function () {\r",
							"    pm.expect(+respData.salary[1]).to.be.below(+respData.salary[2]);\r",
							"});\r",
							"\r",
							"pm.test(\"Check resp.salary[2] = resp.salary[2] \", function () {\r",
							"    pm.expect(respData.salary[2]).to.be.equal(respData.salary[2]);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "43",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "viktor",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/new_data",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "4 test_pet_info +++",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 4) http://162.55.220.72:5005/test_pet_info\r",
							"// req.\r",
							"// POST\r",
							"// age: int\r",
							"// weight: int\r",
							"// name: str\r",
							"// auth_token\r",
							"\r",
							"\r",
							"// Resp.\r",
							"// {'name': name,\r",
							"//  'age': age,\r",
							"//  'daily_food':weight * 0.012,\r",
							"//  'daily_sleep': weight * 2.5}\r",
							"\r",
							"\r",
							"Тесты:\r",
							"// 1) Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"var respData = pm.response.json()\r",
							"console.log(typeof respData)\r",
							"var schema = {\r",
							"    \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\":{\r",
							"            \"age\":{\"type\":\"integer\"},\r",
							"            \"daily_food\":{\"type\":\"number\"},\r",
							"            \"daily_sleep\":{\"type\":\"number\"},\r",
							"            \"nsme\":{\"type\":\"string\"}\r",
							"                    },\r",
							"                    \"required\": [\"age\", \"daily_food\", \"daily_sleep\", \"name\"]\r",
							"             }\r",
							"};\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(respData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"var respData = pm.response.json();\r",
							"var reqData = request.data.weight;\r",
							"console.log(respData)\r",
							"console.log(reqData)\r",
							"\r",
							"\r",
							"// 1.\r",
							"pm.test(\"check weight * 0.012\", function () {\r",
							"    pm.expect(respData.daily_food).to.eql(reqData*0.012);\r",
							"});\r",
							"console.log(respData.daily_food)\r",
							"console.log(reqData*0.012)\r",
							"\r",
							"// 2.\r",
							"pm.test(\"check weight * 2.5\", function () {\r",
							"     pm.expect(respData.daily_sleep).to.eql(reqData*2.5);\r",
							"});\r",
							"console.log(respData.daily_sleep)\r",
							"console.log(reqData*2.5)\r",
							"\r",
							"\r",
							"// ==================="
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "43",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "85",
							"type": "text"
						},
						{
							"key": "name",
							"value": "viktor",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/test_pet_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "5 get_test_user ++++",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ===================\r",
							"\r",
							"// 5) http://162.55.220.72:5005/get_test_user\r",
							"// req.\r",
							"// POST\r",
							"// age: int\r",
							"// salary: int\r",
							"// name: str\r",
							"// auth_token\r",
							"\r",
							"// Resp.\r",
							"// {'name': name,\r",
							"//  'age':age,\r",
							"//  'salary': salary,\r",
							"//  'family':{'children':[['Alex', 24],['Kate', 12]],\r",
							"//  'u_salary_1.5_year': salary * 4}\r",
							"//   }\r",
							"\r",
							"// Тесты:\r",
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 2) Проверка структуры json в ответе.\r",
							"var respData = pm.response.json()\r",
							"console.log(typeof respData)\r",
							"var schema = {\r",
							"        \"type\": \"object\",\r",
							"            \"properties\":{\r",
							"                   \"age\":{\"type\":\"string\"},\r",
							"                   \"family\":{\"type\":\"object\",\r",
							"                         \"properties\": {\"children\":\r",
							"                                   {\"type\":\"array\",\r",
							"                                          \"items\":[\r",
							"                             {\"type\":\"array\",\r",
							"\t\t\t\t\t\t\t        \"items\":[\r",
							"\t\t\t\t\t\t\t              {\"type\":\"string\"},{\"type\":\"number\"}]\r",
							"\t\t\t\t\t\t\t                       },\r",
							"\t\t\t\t\t\t\t              {\"type\":\"array\",\r",
							"\t\t\t\t\t\t\t                     \"items\":[\r",
							"\t\t\t\t\t\t\t                          {\"type\":\"string\"},{\"type\":\"number\"}]\r",
							"\t\t\t\t\t\t\t                        }]\r",
							"                                   } \r",
							"                                        },\r",
							"                                       \"u_salary_1_5_year\":{\"type\":\"number\"}\r",
							"                            },\r",
							"                   \"name\":{\"type\":\"string\"},\r",
							"                   \"salary\":{\"type\":\"number\"}\r",
							"                         },\r",
							"         \"required\":[\"age\", \"family\", \"name\", \"salary\"]       \r",
							"    };\r",
							"\r",
							"pm.test(\"ValidationSchemaJson\", function(){\r",
							"\tpm.response.to.have.jsonSchema(schema);\r",
							"  });\r",
							"//   pm.test(\"Resp is JSON\", function () {\r",
							"//     pm.response.to.be.json;\r",
							"// }); \r",
							"\r",
							"// 3) Проверить что занчение поля name = значению переменной name из окружения\r",
							" var reqName = request.data.name;\r",
							"\r",
							"pm.test(\"check name = env name\", function () {\r",
							"    pm.expect((pm.environment.get(\"name\", reqName))).to.eql(reqName);\r",
							"});\r",
							"console.log((pm.environment.get(\"name\", reqName)))\r",
							"console.log(reqName)\r",
							"\r",
							"// 4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"var respData = pm.response.json();\r",
							"var resp_age = respData.age;\r",
							"var reqAge = request.data.age;\r",
							"\r",
							"pm.test(\"check age resp = aqe request\", function () {\r",
							"    pm.expect(resp_age).to.eql(reqAge);\r",
							"});\r",
							"console.log(resp_age)\r",
							"console.log(reqAge)\r",
							"// ==================="
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "43",
							"type": "text"
						},
						{
							"key": "name",
							"value": "viktor",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary1}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/get_test_user",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "6 /currency +++",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 6) http://162.55.220.72:5005/currency  http://54.157.99.22:80/currency\r",
							"// req.\r",
							"// POST\r",
							"// auth_token\r",
							"\r",
							"// Resp. Передаётся список массив объектов.\r",
							"// [\r",
							"// {\"Cur_Abbreviation\": str,\r",
							"//  \"Cur_ID\": int,\r",
							"//  \"Cur_Name\": str\r",
							"// }\r",
							"// …\r",
							"// {\"Cur_Abbreviation\": str,\r",
							"//  \"Cur_ID\": int,\r",
							"//  \"Cur_Name\": str\r",
							"// }\r",
							"// ]\r",
							"\r",
							"// Тесты:\r",
							"// 1) Можете взять любой объект из присланного списка, используйте js random.\r",
							"// В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
							"\r",
							"\r",
							"\r",
							"function getRandomInt(max) {\r",
							"  return Math.floor(Math.random() * max);\r",
							"}\r",
							"var respData = pm.response.json();\r",
							"var Cur_ID = respData[getRandomInt(respData.length)][\"Cur_ID\"];\r",
							"console.log(Cur_ID)\r",
							"\r",
							"pm.environment.set(\"Cur_ID\", Cur_ID);\r",
							" \r",
							"\r",
							"let arr = new Array();\r",
							"\r",
							"for(let i=0; i<respData.length; i++){\r",
							"    arr.push(respData[i].Cur_Name)\r",
							"}\r",
							"\r",
							"pm.environment.set(\"Cur_Name\", arr);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://54.157.99.22:80/currency",
					"protocol": "http",
					"host": [
						"54",
						"157",
						"99",
						"22"
					],
					"port": "80",
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "7 /curr_byn +++",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// 7) http://162.55.220.72:5005/curr_byn   http://54.157.99.22:80/curr_byn\r",
							"// req.\r",
							"// POST\r",
							"// auth_token\r",
							"// curr_code: int\r",
							"\r",
							"// Resp.\r",
							"// {\r",
							"//     \"Cur_Abbreviation\": str\r",
							"//     \"Cur_ID\": int,\r",
							"//     \"Cur_Name\": str,\r",
							"//     \"Cur_OfficialRate\": float,\r",
							"//     \"Cur_Scale\": int,\r",
							"//     \"Date\": str\r",
							"// }\r",
							"\r",
							"// Тесты:\r",
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"var respData =pm.response.json()\r",
							"\r",
							"var schema = {\r",
							"    \r",
							"        \"type\":\"object\",\r",
							"            \"properties\": {\r",
							"                    \"Cur_Abbreviation\":{\"type\":\"string\"},\r",
							"                    \"Cur_ID\":{\"type\":\"number\"},\r",
							"                    \"Cur_Name\":{\"type\":\"string\"},\r",
							"                    \"Cur_OfficialRate\": {\"type\":\"number\"},\r",
							"                    \"Cur_Scale\": {\"type\":\"number\"},\r",
							"                    \"Date\": {\"type\":\"string\"}\r",
							"                         },\r",
							"        \"required\":[\"Cur_Abbreviation\", \"Cur_ID\", \"Cur_Name\", \"Cur_OfficialRate\", \"Cur_Scale\",\"Date\"]\r",
							"        \r",
							"};\r",
							"pm.test(\"Schema is valid_1\", function(){\r",
							"\tpm.response.to.have.jsonSchema(schema);\r",
							"  });\r",
							"\r",
							"pm.test(\"Resp is JSON\", function () {\r",
							" pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"// // ===============\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://54.157.99.22:80/curr_byn",
					"protocol": "http",
					"host": [
						"54",
						"157",
						"99",
						"22"
					],
					"port": "80",
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		},
		{
			"name": "7 /curr_byn Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// 7)  http://54.157.99.22:80/curr_byn\r",
							"// req.\r",
							"// POST\r",
							"// auth_token\r",
							"// curr_code: int\r",
							"\r",
							"// Resp.\r",
							"// {\r",
							"//     \"Cur_Abbreviation\": str\r",
							"//     \"Cur_ID\": int,\r",
							"//     \"Cur_Name\": str,\r",
							"//     \"Cur_OfficialRate\": float,\r",
							"//     \"Cur_Scale\": int,\r",
							"//     \"Date\": str\r",
							"// }\r",
							"\r",
							"// // ===============\r",
							"// // ***\r",
							"\r",
							"\r",
							"// 1) получить список валют\r",
							"\r",
							"var Cur_Name = pm.environment.get(\"Cur_Name\")\r",
							"// console.log(Cur_Name)\r",
							"\r",
							"// 2) итерировать список валют\r",
							"var respData = pm.response.json();\r",
							"\r",
							"for( var i=0; i < 119; i++){\r",
							"// console.log(Cur_Name[i])\r",
							"};\r",
							"\r",
							"// 3) в каждой итерации отправлять запрос на сервер для получения курса каждой валюты\r",
							"\r",
							"\r",
							"const  postRequest = {\r",
							"    url:\"http://54.157.99.22:80/curr_byn\",\r",
							"    method:\"POST\",\r",
							"    body:{\r",
							"        mode:\"formdata\",\r",
							"        formdata: [\r",
							"                           {\r",
							"                            \"key\": \"auth_token\",\r",
							"\t\t\t\t\t\t\t\"value\": \"{{auth_token}}\",\r",
							"\t\t\t\t\t\t\t\"type\": \"text\" \r",
							"                            },\r",
							"                            {\r",
							"                             \"key\": \"curr_code\",\r",
							"\t\t\t\t\t\t\t\"value\": \"{{Cur_ID}}\",\r",
							"\t\t\t\t\t\t\t\"type\": \"text\"\r",
							"                            } \r",
							"                   ]\r",
							"          }\r",
							"};\r",
							"console.log(postRequest)\r",
							"\r",
							"for( var i=0; i < 119; i++){\r",
							"    \r",
							"\r",
							"// console.log(Cur_Name[i])\r",
							"};\r",
							"\r",
							"// 4) если возвращается 500 код, переходим к следующей итреации\r",
							"\r",
							"\r",
							"// 5) если получаем 200 код, проверяем response json на наличие поля \"Cur_OfficialRate\"\r",
							"\r",
							"// 6) если поле есть, пишем в консоль инфу про фалюту в виде response\r",
							"// {\r",
							"//     \"Cur_Abbreviation\": str\r",
							"//     \"Cur_ID\": int,\r",
							"//     \"Cur_Name\": str,\r",
							"//     \"Cur_OfficialRate\": float,\r",
							"//     \"Cur_Scale\": int,\r",
							"//     \"Date\": str\r",
							"// }\r",
							"// 7) переходим к следующей итерации"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://54.157.99.22:80/curr_byn",
					"protocol": "http",
					"host": [
						"54",
						"157",
						"99",
						"22"
					],
					"port": "80",
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "variable_key",
			"value": ""
		}
	]
}